# Generated from nsc.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,
        15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,
        19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,5,29,163,
        8,29,10,29,12,29,166,9,29,1,30,4,30,169,8,30,11,30,12,30,170,1,30,
        1,30,4,30,175,8,30,11,30,12,30,176,3,30,179,8,30,1,31,1,31,5,31,
        183,8,31,10,31,12,31,186,9,31,1,31,1,31,1,32,4,32,191,8,32,11,32,
        12,32,192,1,32,1,32,1,33,1,33,1,33,1,33,5,33,201,8,33,10,33,12,33,
        204,9,33,1,33,1,33,1,184,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,1,0,5,2,0,65,90,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,213,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,
        0,0,5,73,1,0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,79,1,0,0,0,13,85,1,
        0,0,0,15,89,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,100,1,0,0,0,23,
        105,1,0,0,0,25,110,1,0,0,0,27,116,1,0,0,0,29,119,1,0,0,0,31,123,
        1,0,0,0,33,126,1,0,0,0,35,129,1,0,0,0,37,134,1,0,0,0,39,136,1,0,
        0,0,41,138,1,0,0,0,43,141,1,0,0,0,45,144,1,0,0,0,47,147,1,0,0,0,
        49,150,1,0,0,0,51,152,1,0,0,0,53,154,1,0,0,0,55,156,1,0,0,0,57,158,
        1,0,0,0,59,160,1,0,0,0,61,168,1,0,0,0,63,180,1,0,0,0,65,190,1,0,
        0,0,67,196,1,0,0,0,69,70,5,94,0,0,70,2,1,0,0,0,71,72,5,40,0,0,72,
        4,1,0,0,0,73,74,5,41,0,0,74,6,1,0,0,0,75,76,5,61,0,0,76,8,1,0,0,
        0,77,78,5,59,0,0,78,10,1,0,0,0,79,80,5,98,0,0,80,81,5,101,0,0,81,
        82,5,103,0,0,82,83,5,105,0,0,83,84,5,110,0,0,84,12,1,0,0,0,85,86,
        5,101,0,0,86,87,5,110,0,0,87,88,5,100,0,0,88,14,1,0,0,0,89,90,5,
        112,0,0,90,91,5,114,0,0,91,92,5,105,0,0,92,93,5,110,0,0,93,94,5,
        116,0,0,94,16,1,0,0,0,95,96,5,44,0,0,96,18,1,0,0,0,97,98,5,105,0,
        0,98,99,5,102,0,0,99,20,1,0,0,0,100,101,5,116,0,0,101,102,5,104,
        0,0,102,103,5,101,0,0,103,104,5,110,0,0,104,22,1,0,0,0,105,106,5,
        101,0,0,106,107,5,108,0,0,107,108,5,115,0,0,108,109,5,101,0,0,109,
        24,1,0,0,0,110,111,5,119,0,0,111,112,5,104,0,0,112,113,5,105,0,0,
        113,114,5,108,0,0,114,115,5,101,0,0,115,26,1,0,0,0,116,117,5,100,
        0,0,117,118,5,111,0,0,118,28,1,0,0,0,119,120,5,102,0,0,120,121,5,
        111,0,0,121,122,5,114,0,0,122,30,1,0,0,0,123,124,5,111,0,0,124,125,
        5,102,0,0,125,32,1,0,0,0,126,127,5,116,0,0,127,128,5,111,0,0,128,
        34,1,0,0,0,129,130,5,108,0,0,130,131,5,111,0,0,131,132,5,111,0,0,
        132,133,5,112,0,0,133,36,1,0,0,0,134,135,5,58,0,0,135,38,1,0,0,0,
        136,137,5,62,0,0,137,40,1,0,0,0,138,139,5,60,0,0,139,140,5,61,0,
        0,140,42,1,0,0,0,141,142,5,62,0,0,142,143,5,61,0,0,143,44,1,0,0,
        0,144,145,5,61,0,0,145,146,5,61,0,0,146,46,1,0,0,0,147,148,5,33,
        0,0,148,149,5,61,0,0,149,48,1,0,0,0,150,151,5,60,0,0,151,50,1,0,
        0,0,152,153,5,42,0,0,153,52,1,0,0,0,154,155,5,47,0,0,155,54,1,0,
        0,0,156,157,5,43,0,0,157,56,1,0,0,0,158,159,5,45,0,0,159,58,1,0,
        0,0,160,164,7,0,0,0,161,163,7,1,0,0,162,161,1,0,0,0,163,166,1,0,
        0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,60,1,0,0,0,166,164,1,0,0,
        0,167,169,7,2,0,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,
        0,170,171,1,0,0,0,171,178,1,0,0,0,172,174,5,46,0,0,173,175,7,2,0,
        0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,
        0,177,179,1,0,0,0,178,172,1,0,0,0,178,179,1,0,0,0,179,62,1,0,0,0,
        180,184,5,34,0,0,181,183,9,0,0,0,182,181,1,0,0,0,183,186,1,0,0,0,
        184,185,1,0,0,0,184,182,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,
        187,188,5,34,0,0,188,64,1,0,0,0,189,191,7,3,0,0,190,189,1,0,0,0,
        191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,
        194,195,6,32,0,0,195,66,1,0,0,0,196,197,5,47,0,0,197,198,5,47,0,
        0,198,202,1,0,0,0,199,201,8,4,0,0,200,199,1,0,0,0,201,204,1,0,0,
        0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,
        0,205,206,6,33,0,0,206,68,1,0,0,0,8,0,164,170,176,178,184,192,202,
        1,6,0,0
    ]

class nscLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    ID = 30
    NUMBER = 31
    STRING = 32
    WS = 33
    COMMENT = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'^'", "'('", "')'", "'='", "';'", "'begin'", "'end'", "'print'", 
            "','", "'if'", "'then'", "'else'", "'while'", "'do'", "'for'", 
            "'of'", "'to'", "'loop'", "':'", "'>'", "'<='", "'>='", "'=='", 
            "'!='", "'<'", "'*'", "'/'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "ID", "NUMBER", "STRING", "WS", 
                  "COMMENT" ]

    grammarFileName = "nsc.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


