import sys
from antlr4 import *
from  nscLexer import  nscLexer
from  nscParser import  nscParser
from  nscVisitor import  nscVisitor

# Extend the visitor class generated by ANTLR
class  nscInterpreter(nscVisitor):
    def __init__(self):
        self.variables = {}

    # Visit a parse tree produced by  nscParser#program.
    def visitProgram(self, ctx:  nscParser.ProgramContext):
        return self.visitStatements(ctx.statements())

    # Visit a parse tree produced by  nscParser#statements.
    def visitStatements(self, ctx:  nscParser.StatementsContext):
        for statement in ctx.statement():
            self.visitStatement(statement)

    # Visit a parse tree produced by  nscParser#statement.
    def visitStatement(self, ctx:  nscParser.StatementContext):
        if ctx.IDENTIFIER():
            var_name = ctx.IDENTIFIER().getText()
            if ctx.EQ():
                value = self.visitExpr(ctx.expr())
                self.variables[var_name] = value
            elif ctx.PRINT():
                if ctx.STRINGLITERAL():
                    print(ctx.STRINGLITERAL().getText()[1:-1], end=' ')
                if ctx.IDENTIFIER():
                    print(self.variables.get(ctx.IDENTIFIER().getText()), end=' ')
                print()
        elif ctx.BEGIN():
            self.visitStatements(ctx.statements())
        elif ctx.IF():
            if self.visitExpr(ctx.expr()):
                self.visitStatement(ctx.statement(0))
            elif ctx.ELSE():
                self.visitStatement(ctx.statement(1))
        elif ctx.WHILE():
            while self.visitExpr(ctx.expr()):
                self.visitStatement(ctx.statement())
        elif ctx.FOR():
            var_name = ctx.IDENTIFIER().getText()
            start = int(ctx.NUMBER(0).getText())
            end = int(ctx.NUMBER(1).getText())
            for i in range(start, end + 1):
                self.variables[var_name] = i
                self.visitStatement(ctx.statement())
        elif ctx.LOOP():
            var_name = ctx.IDENTIFIER().getText()
            count = int(ctx.NUMBER().getText())
            for i in range(1, count + 1):
                self.variables[var_name] = i
                self.visitStatement(ctx.statement())

    # Visit a parse tree produced by  nscParser#expr.
    def visitExpr(self, ctx:  nscParser.ExprContext):
        if ctx.NUMBER():
            return float(ctx.NUMBER().getText())
        elif ctx.IDENTIFIER():
            return self.variables.get(ctx.IDENTIFIER().getText())
        elif ctx.binop():
            left = self.visitExpr(ctx.expr(0))
            right = self.visitExpr(ctx.expr(1))
            op = ctx.binop().getText()
            if op == '+':
                return left + right
            elif op == '-':
                return left - right
            elif op == '*':
                return left * right
            elif op == '/':
                return left / right
            elif op == '^':
                return left ** right
            elif op == '<':
                return left < right
            elif op == '>':
                return left > right
            elif op == '<=':
                return left <= right
            elif op == '>=':
                return left >= right
            elif op == '==':
                return left == right
            elif op == '!=':
                return left != right
        elif ctx.NOT():
            return not self.visitExpr(ctx.expr())
        elif ctx.LPAR():
            return self.visitExpr(ctx.expr())
        return None

def main(argv):
    input_stream = FileStream(argv[1])
    lexer =  nscLexer(input_stream)
    stream = CommonTokenStream(lexer)
    parser =  nscParser(stream)
    tree = parser.program()

    interpreter =  nscInterpreter()
    interpreter.visit(tree)

if __name__ == '__main__':
    main(sys.argv)
